#!/usr/bin/perl
#
# Author: Brad Fitzpatrick <brad@danga.com>
#
# You'll need Debian packages curl, sane-utils, sane, scanadf, some
# perl stuff, etc.  I kinda expect you to modify this to suit your
# needs.  I wrote it for me.  This is hacky and I don't offer support.
# I do, however, accept gushing emails of full of love.
#
# ============
# Basic usage:
# ============
#
#   (Load scanner full of documents)
#   $ scancab --adf
#   $ scancab --adf --color
#   $ scancab --adf --lineart
#   $ scancab --duplex          (both sides.  implies --adf)
#
#   Those commands above just write to the queue directory.
#   Make sure you mkdir ~/scancab-queue
#
#   (But run this in the background in another terminal,
#    which does the actual potentially-slow uploads, making
#    sure to do them in the right creation order, doing retries,
#    etc....)
#   $ scancab --loop
#
#   (Upload a certain document, but don't delete it...)
#   $ scancab --upload=foo.jpg
#
# =================
# Scanner Advice...
# =================
# I can't say enough good things about my Fujitsu ScanSnap S1500M
# (identical to S1500).  Great, fast hardware, great Linux support.
# A++.  Would buy again.

use strict;
use LWP::Simple;
use Getopt::Long;
use IPC::Run ();

my $URL = "http://localhost:8080";
my $EMAIL = "$ENV{USER}\@gmail.com";  # uh, works for me. :)
my $password = "";

my $uploader_pid_file = "";
my $queue_dir = "$ENV{HOME}/scancab-queue/";

# Detect when we're the helper program (--scan-script) to scanadf,
# which we run in --adf batch mode.  (this script functions as both
# the driver and the helper)
if ($ENV{'SCAN_RES'} || $ENV{'SCAN_FORMAT_ID'}) {
    be_batch_scan_script();
    exit(0);
}

my $upload_loop = 0;

my $adf = 0;

my $upload_file;
my $color = 0;
my $lineart = 0;
my $appid = $ENV{'SCANCAB_APPID'};
my $upload_now = 0;
my $duplex = 0;

die unless GetOptions(
    "appid=s" => \$appid,
    "email=s" => \$EMAIL,
    "password=s" => \$password,

    # Upload this file, don't delete it, then exit.
    "upload=s" => \$upload_file,
    "upload_now" => \$upload_now,  # don't queue

    # Loop, looking in $queue_dir 
    "loop" => \$upload_loop, 

    # Use the auto-document-feeder.
    "adf" => \$adf,
    "duplex" => \$duplex,

    # Mutually exclusive:
    "color" => \$color,
    "lineart" => \$lineart,
    );

$adf = 1 if $duplex;

die "Can't do both color and lineart.\n" if $color && $lineart;

die "appid parameter must be just an appengine appid"
    if $appid && $appid !~ /^[\w-]+$/;

# ADF mode doesn't need to upload (just drops stuff into a batch directory) so
# don't need to setup URL or password in that case.
unless ($adf) {
    my $conf_dir = "$ENV{HOME}/.config/scanningcabinet";
    $appid ||= slurp("$conf_dir/appid")
        or warn "No appid configured in $conf_dir/appid; assuming $URL\n";
    $password ||= slurp("$conf_dir/password")
        or die "No password configured in args or in $conf_dir/password\n";
    if ($appid) {
        $URL = "https://$appid.appspot.com";
    }
}

if ($upload_loop) {
    chdir($queue_dir) or die "Failed to chdir to queue directory $queue_dir.\n";
    while (1) {
        opendir(my $dh, ".") or die;
        my %create_time;  # filename -> unixtime
        my @files = grep { /^image-.+-unx(\d+)\.(png|jpg)$/ && ($create_time{$_} = $1) } readdir($dh);

        # Note: need the fallback on ($a cmp $b) because my Fujitsu
        # ScanSnap S1500M is so damn fast, that sometimes files all
        # have the same unixtime(!):
        @files = sort { ($create_time{$a} <=> $create_time{$b}) || ($a cmp $b) } @files;

        closedir($dh);
        if (@files) {
            my $failures;
            foreach my $file (@files) {
                if (upload_file($file)) {
                    unlink($file);
                } else {
                    $failures = 1;
                    print STDERR "# Upload error.  Sleeping for 5 seconds...\n";
                    last;
                }
            }
            print "Uploads complete.  Waiting for new files.\n";
        }
        sleep 5;
    }
}

if ($upload_file) {
    die "File $upload_file doesn't exist.\n" unless -e $upload_file;
    print "Uploading $upload_file ...\n";
    if (!upload_file($upload_file)) {
        die "Failed to upload.\n";
    }
    exit(0);
}

my $scan = 1;   # implicit default mode, for now.

if ($scan) {
    my %seen;
    opendir(D, ".") or die;
    my @files = readdir(D);
    foreach my $f (@files) {
        $seen{$f} = 1 if $f =~ /^image-\d\d\d\d/;
    }

    my $n = 1;
    my $base = sprintf("image-%04d", $n);
    while ($seen{$base} ||
           $seen{"$base.tiff"} ||
           $seen{"$base.jpg"} ||
           $seen{"$base.png"}) {
        $n++;
        $base = sprintf("image-%04d", $n);
    }
    my $tiff = "$base.tiff";

    my $mode = $lineart ? "Lineart" : ($color ? "Color" : "Gray");
    if ($lineart) {
        $ENV{SCAN_LINEART} = 1;  # to pass to subprocess
    }
    if ($adf) {
        my $extra_source = $duplex ? " --source=\"ADF Duplex\"" : "";
        system("scanadf --mode $mode --resolution 300 " .
               $extra_source .
               "  --scan-script $0 " .
               "  -s $n") and die "Failed to batch scan.";
    } else {
        my $cmd = "scanimage --mode $mode --resolution 300 --format tiff > $tiff";
        system($cmd)
            and die "Failed to scan while running:\n  $cmd\n";

        my $out = $lineart ? "$base.png" : "$base.jpg";
        print "Scanned.  Converting $tiff -> $out\n";
        system("convert", "-quality", "90", $tiff, $out)
            and die "failed to convert.\n";
        unlink($tiff) or die "Failed to unlink $tiff: $!";
        if ($upload_now) {
            if (!upload_file($out)) {
                die "Failed to upload $out (keeping file)\n";
            }
            unlink($out);
        } else {
            my $qfile = "$queue_dir/$out-unx" . time() . substr($out, -4);
            print "Moving file from $out to $qfile\n";
            system("mv", $out, $qfile) and die "Failed to move file.\n";
        }
    }
    exit(0);
}

sub upload_file {
    my $file = shift;
    print "Fetching upload URL (for $file) ...\n";
    my $url_to_get_an_upload_url = "$URL/uploadurl?" .
        "user_email=$EMAIL&password=" . eurl($password);
    print "Getting an upload URL from: $url_to_get_an_upload_url\n";
    my $upload_url = get($url_to_get_an_upload_url);
    die "Didn't get URL.  Wrong password?\n\nGot: $upload_url\n"
        unless $upload_url =~ /^http.+/;
    chomp $upload_url;
    print "Uploading to: $upload_url ...\n";
    my $stdin = "";
    my ($stdout, $stderr);
    if (IPC::Run::run(
            ["curl",
             "-s", # silent mode
             "-F", "file=\@$file",
             "-F", "password=$password",
             "-F", "user_email=$EMAIL",
             $upload_url],
            \$stdin,
            \$stdout,
            \$stderr) && !$stdout && !$stderr) {
        print "Upload of $file: success.\n";
        return 1;
    }
    print "Error uploading file: $file\n";
    if ($stdout) {
        print "Curl returned unexpected stdout: $stdout";
    }
    if ($stderr) {
        print "Curl returned unexpected stderr: $stderr";
    }
    print "Upload of $file failed.\n";
    return 0;
}

sub be_batch_scan_script {
    die "Expected $1 to be image-nnnn" unless $ARGV[0] =~ m!\bimage-\d\d\d\d$!;
    die "No SCAN_FORMAT\n" unless $ENV{SCAN_FORMAT};
    my $filebase = $&;
    print "[$$] Got format: $ENV{SCAN_FORMAT} for $filebase\n";

    my $ext = "jpg";
    if ($ENV{SCAN_LINEART}) {
        $ext = "png";
    }

    my $now = time();
    my $tmp_file  = "$queue_dir/$filebase-unx$now-TMP.$ext";
    my $dest_file = "$queue_dir/$filebase-unx$now.$ext";
    system("convert", "-quality", 95, $ARGV[0], $tmp_file)
        and die "Failed to convert.";
    rename($tmp_file, $dest_file) or die "Failed to rename $tmp_file to $dest_file: $!\n";
    unlink($ARGV[0]);
}

sub eurl {
    my $a = $_[0];
    $a =~ s/([^a-zA-Z0-9_\,\-.\/\\\: ])/uc sprintf("%%%02x",ord($1))/eg;
    $a =~ tr/ /+/;
    return $a;
}

sub slurp {
    my $file = shift;
    open(my $fh, $file) or return undef;
    my $contents = do { local $/; <$fh>; };
    chomp $contents;
    return $contents;
}
